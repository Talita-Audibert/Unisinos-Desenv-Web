# Grupo Delta
	Nomes:  Édson Matos, Mateus Teixeira, Mauro Schütz e Talita Audibert
	Curso: Desenvolvimento para a Web
	
# Introdução do Aplicativo

	O aplicativo de enquadra como um gerenciador de listas/catalogo, o cliente
	faz a seleção do carro a ser alugado e o período de tempo que este
	vai ser usado, a parte de reservas mostra os carros reservados pelo
	cliente local que está acessando o aplicativo.

# Tecnologias Usadas

* jQuery
	Usado para as requisições dos formulários HTML via Ajax, assim como
	alteração DOM dos elementos visuais
	
* Twitter BootStrap
	Elementos visuais prontos para serem usados, assim como esquemas de
	espaçamento e padrões para formulários e janelas de aviso / confirmação.
	
* BootStrap-DateTimePicker
	Extensão / Plugin para o BootStrap para apresentação de um calendário (data + hora)
	no momento de escolha das datas de alocação.

* History-API
	API W3C para gerenciamento de histórico de navegação, fazendo com que endereços possam
	ser adicionados e permitir que o navegador navegue pelo histórico e o ajax faça as
	requisições para as páginas acessadas, pode-se ser usado em conjunto com a sessionStorage
	para manter dados preenchidos entre as navegações sem perda de tempo para alteração de
	algum dado.

* localStorage
	API W3C para armazenamento local, semelhante a cookies, porem somente sendo acessado
	via JavaScript na parte cliente, usado como banco de dados	local antes de ser feita
	a implementação servidor do sistema.
	
* Node.JS
	Servidor que faz uso do JavaScript para poder servir páginas e outros tipos de dados, fazendo
	uso do Express.JS 4.0

# Tecnologias Usadas no Node.JS

* Express.JS
	Faz o gerenciamento Web, suportando uma afinidade de acessos via tabela de roteamento, sendo um
	poderoso meio de servir páginas no Node.JS

* SQLite3
	Banco de dados local que faz uso de comandos SQL, devido ao tamanho do projeto e dos tipos de acesso
	o mesmo foi escolhido para armazenar os dados do site
	
* Express-Session
	Controle de sessões por parte do Express.JS, armazena as sessões de login
	
* Crypto
	Cria hashs para senhas, sendo o sistema utilizando salt para maior proteção caso o banco de dados seja
	o hash da senha encontrado a senha não ser encontrada via força bruta
	
* Mustache
	Sistema simples e poderoso para renderização de telas, possibilitando lógica simples nos templates e
	controles de repetição de dados

# Funcionamento
	O cliente faz a reserva na página inicial do aplicativo, o código da aplicação pega os
	dados de reserva e armazena numa variável em localStorange, onde estas reservas podem
	ser consultadas na página de reserva. O formulário de contato foi criado somente para
	ser então implementado na segunda etapa	do trabalho, onde o envio e checagem serão feitas
	via servidor.
	
	O administrador do servidor pode entrar em /painel via url do browser, caso não haja banco de dados
	o sistema ira pedir um usuário e senha para criar o sistema.db onde os dados são armazenados localmente,
	a escolha foi feita pelo tamanho do projeto e pela pouco acesso, sendo simples de manter em um ambiente de desenvolvimento
	local, através desse painel o administrador pode cadastrar carros e cancelar/remover reservas feitas.
	
# Login já fornecido
	usuário: admin
	senha: teste
	
# Problemas no servidor
	Um erro de cadastro de reserva está impossibilitando o cadastro de reserva de veículos, mas o
	administrador poderá cadastrar carros no sistema, altera-los e exclui-los caso necessário.

# Limitações
	As limitações atuais são listadas abaixo e devem ser corrigidas na implementação do servidor.
	
	- A History API registra páginas inexistentes no histórico e só podem ser acessadas a partir
	da página inicial, essa limitação poderá ser corrigida na implementação da aplicação do lado
	servidor, onde as páginas realmente existiram.
	- Cliente atual pode ver os carros cadastrados, mas por algum motivo não encontrado até o momento
	o sistema não efetua o cadastro da reserva, o defeito impossibilita a checagem de periodo

# Próximos Passos (ToDo)
	- Efetuar o cadastro de clientes
	- Correção de erro de reserva
	- Aceitar o upload de fotos de carros
	- Escolher o carro a ser reservado via carrossel da direita da índice
	- Concluir o formulário de contato na próxima etapa (no node.js)
	- Checar os periodos de reservas
		* após correção do erro de reserva

# Breve Conclusão
	Não há o cadastro de clientes e o aplicativo somente faz o cadastro de reservas simples, sem o administrador saber
	qual cliente fez o cadastro, isso pode ser resolvido adicionando um cadastro de clientes e uma tabela de clientes,
	no caso podesse usar a tabela usuário e adicionar uma variavel para controlar o tipo de acesso (cliente/administrador).
